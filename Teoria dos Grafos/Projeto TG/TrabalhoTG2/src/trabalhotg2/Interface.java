/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interface.java
 *
 * Created on 20/10/2011, 11:28:47
 */
package trabalhotg2;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

/**
 *
 * @author JH
 */
public class Interface extends javax.swing.JFrame {
    /** Creates new form Interface */
    public static int iterator;
    public static AlgFloyd Floyd;
    public static AlgKruskal Kruskal;
    public static AlgFord Ford;
    public static int inf=999999999;
    
    public Interface() {
        initComponents();
        Next.setVisible(false);
        GoToEnd.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFrame2 = new javax.swing.JFrame();
        label2 = new java.awt.Label();
        numVertex = new java.awt.TextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Matrix = new javax.swing.JTable();
        OKMatrix = new javax.swing.JButton();
        jFrame3 = new javax.swing.JFrame();
        jFileChooser2 = new javax.swing.JFileChooser();
        label1 = new java.awt.Label();
        choice1 = new java.awt.Choice();
        jScrollPane2 = new javax.swing.JScrollPane();
        MatrixTable = new javax.swing.JTable();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        jScrollPane3 = new javax.swing.JScrollPane();
        NegativeCycle = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        PartialSolution = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        PriorityQueue = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        MSTWeight = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        VConsole = new javax.swing.JTextArea();
        GoToEnd = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        OpenFile = new javax.swing.JButton();
        MakeGraph = new javax.swing.JButton();
        SaveFile = new javax.swing.JButton();

        jFrame1.setTitle("Open");

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Users\\JH\\Documents\\SO\\Dropbox\\Projeto TG\\TrabalhoTG2\\Arquivos"));
        jFileChooser1.setDialogTitle("Open");
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jFrame2.setTitle("Make");

        label2.setText("Number of vertex:");

        numVertex.setText("Number of vertex");
        numVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numVertexActionPerformed(evt);
            }
        });

        Matrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Matrix.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane1.setViewportView(Matrix);

        OKMatrix.setText("OK");
        OKMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKMatrixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OKMatrix)
                .addContainerGap(343, Short.MAX_VALUE))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKMatrix)
                .addContainerGap())
        );

        jFileChooser2.setCurrentDirectory(new java.io.File("C:\\Users\\JH\\Documents\\SO\\Dropbox\\Projeto TG\\TrabalhoTG2\\Arquivos"));
        jFileChooser2.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame3Layout.createSequentialGroup()
                .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame3Layout.createSequentialGroup()
                .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algorithm TG");

        label1.setText("Algorithm:");

        choice1.add("None");
        choice1.add("Floyd");
        choice1.add("Ford");
        choice1.add("Kruskal");
        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        MatrixTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        MatrixTable.setFocusTraversalPolicyProvider(true);
        MatrixTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        MatrixTable.setName(""); // NOI18N
        jScrollPane2.setViewportView(MatrixTable);
        MatrixTable.setVisible(false);
        MatrixTable.setSize(0, 0);

        label3.setText("S:");

        label4.setName(""); // NOI18N
        label4.setText("Queue:");

        label5.setText("MST:");

        label6.setText("Negative Cycle:");

        jScrollPane3.setViewportView(NegativeCycle);

        jScrollPane4.setViewportView(PartialSolution);

        jScrollPane5.setViewportView(PriorityQueue);

        jScrollPane6.setViewportView(MSTWeight);

        VConsole.setColumns(20);
        VConsole.setRows(5);
        VConsole.setEnabled(false);
        jScrollPane7.setViewportView(VConsole);

        GoToEnd.setText("Go To End");
        GoToEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoToEndActionPerformed(evt);
            }
        });

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        OpenFile.setText("Open File");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });

        MakeGraph.setText("Make Graph");
        MakeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeGraphActionPerformed(evt);
            }
        });

        SaveFile.setText("Save");
        SaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GoToEnd))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OpenFile, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MakeGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(OpenFile)
                            .addComponent(MakeGraph)
                            .addComponent(SaveFile))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Next)
                            .addComponent(GoToEnd))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void numVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numVertexActionPerformed
    int nV=Integer.parseInt(numVertex.getText());
    main.G.MakeGraph(nV);
    while(Matrix.getColumnCount()!=nV)
        Matrix.setModel(new javax.swing.table.DefaultTableModel(new Object[nV][nV],new String[nV]));
}//GEN-LAST:event_numVertexActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        //int inf=999999999;
        switch(choice1.getSelectedIndex()){
            case 1://Floyd
                iterator=-1;
                main.BufferConsole="Floyd";
                VConsole.setText(main.BufferConsole);
                MatrixTable.setVisible(true);//matriz de adjacência
                MatrixTable.setSize(300,64);
                //label3.setVisible(false);
                PartialSolution.setVisible(false);
                //label4.setVisible(false);
                PriorityQueue.setVisible(false);
                //label5.setVisible(false);
                MSTWeight.setVisible(false);
                Next.setVisible(true);//passar iteração
                GoToEnd.setVisible(true);
                //label6.setVisible(false);
                NegativeCycle.setVisible(false);
                int nV=main.G.getNumberOfVertex();
                while(MatrixTable.getColumnCount()!=nV)
                    MatrixTable.setModel(new javax.swing.table.DefaultTableModel(new Object[nV][nV],new String[nV]));
                for(int i=0;i<nV;i++){
                    for(int j=0;j<nV;j++){
                        int ele=main.G.getElement(i, j);
                        if(ele==inf){
                            System.out.println("Infinite");
                            MatrixTable.setValueAt("Infinite",i,j);
                        }else{
                            System.out.println(ele);
                            MatrixTable.setValueAt(ele,i,j);
                        }
                    }   
                }
                int [][]DMatrix=new int[nV][nV];
                Floyd=new AlgFloyd();
                for(int i=0;i<nV;i++){
                    for(int j=0;j<nV;j++){
                        DMatrix[i][j]=main.G.getElement(i,j);
                    }
                }
            break;
            case 2://Ford
                iterator=-1;
                main.BufferConsole="Ford";
                VConsole.setText(main.BufferConsole);
                MatrixTable.setVisible(true);//matriz->vetor com os pesos dos vertices
                MatrixTable.setSize(300,64);
                label6.setVisible(true);//se há detecção de ciclo negativo ou não
                NegativeCycle.setVisible(true);//se há detecção de ciclo negativo ou não
                //label3.setVisible(false);
                PartialSolution.setVisible(false);
                //label4.setVisible(false);
                PriorityQueue.setVisible(false);
                //label5.setVisible(false);
                MSTWeight.setVisible(false);
                Next.setVisible(true);//passar iteração
                GoToEnd.setVisible(true);
                int nV2=main.G.getNumberOfVertex();
                int [][]DMatrix2=new int[nV2][nV2];
                Ford=new AlgFord();
                 while(MatrixTable.getColumnCount()!=nV2)
                    MatrixTable.setModel(new javax.swing.table.DefaultTableModel(new Object[2][nV2],new String[nV2]));
                for(int i=0;i<nV2;i++){
                    for(int j=0;j<nV2;j++){
                        DMatrix2[i][j]=main.G.getElement(i,j);
                    }
                }
                NegativeCycle.setText("");
                for(int i=0;i<nV2;i++){
                    int ele=AlgFord.pai[i];
                    if(ele==inf){
                        System.out.println("Infinite");
                        MatrixTable.setValueAt("Infinite",0,i);
                    }else{
                        System.out.println(ele);
                        MatrixTable.setValueAt("P",0,i);
                    }
                    ele=AlgFord.peso[i];
                    if(ele==inf){
                        System.out.println("Infinite");
                        MatrixTable.setValueAt("Infinite",1,i);
                    }else{
                        System.out.println(ele);
                        MatrixTable.setValueAt("F",1,i);
                    }
                }
            break;
            case 3://Kruskal
                iterator=-1;
                main.BufferConsole="Kruskal";
                VConsole.setText(main.BufferConsole);
                MatrixTable.setSize(0,0);
                MatrixTable.setVisible(false);
                label3.setVisible(true);//solução parcial S
                PartialSolution.setVisible(true);//solução parcial S
                label4.setVisible(true);//conteúdo da fila de prioridade
                PriorityQueue.setVisible(true);//conteúdo da fila de prioridade
                label5.setVisible(true);//peso total da MST obtida
                MSTWeight.setVisible(true);//peso total da MST obtida
                Next.setVisible(true);//passar iteração
                GoToEnd.setVisible(true);
                //label6.setVisible(false);
                NegativeCycle.setVisible(false);
                int nV3=main.G.getNumberOfVertex();
                int [][]DMatrix3=new int[nV3][nV3];
                Kruskal=new AlgKruskal();
                for(int i=0;i<nV3;i++){
                    for(int j=0;j<nV3;j++){
                        DMatrix3[i][j]=main.G.getElement(i,j);
                    }
                }
                PriorityQueue.setText(Kruskal.Q.QueueString());
                PartialSolution.setText(Kruskal.S);
                MSTWeight.setText(Integer.toString(Kruskal.cost));
            break;
            case 4:
                iterator=-1;
                MatrixTable.setSize(0,0);
                MatrixTable.setVisible(false);
                //label3.setVisible(false);
                PartialSolution.setVisible(false);
                //label4.setVisible(false);
                PriorityQueue.setVisible(false);
                //label5.setVisible(false);
                MSTWeight.setVisible(false);
                Next.setVisible(false);
                GoToEnd.setVisible(false);
                //label6.setVisible(false);
                NegativeCycle.setVisible(false);
            break;
            default:
                iterator=-1;
                MatrixTable.setSize(0,0);
                MatrixTable.setVisible(false);
                //label3.setVisible(false);
                PartialSolution.setVisible(false);
                //label4.setVisible(false);
                PriorityQueue.setVisible(false);
                //label5.setVisible(false);
                MSTWeight.setVisible(false);
                Next.setVisible(false);
                GoToEnd.setVisible(false);
                //label6.setVisible(false);
                NegativeCycle.setVisible(false);
                main.BufferConsole="None";
                Interface.VConsole.setText(main.BufferConsole);
            break;
        }
    }//GEN-LAST:event_choice1ItemStateChanged

    private void GoToEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoToEndActionPerformed
        // TODO add your handling code here:
        iterator++;
        int nV=main.G.getNumberOfVertex();
        int [][]DMatrix=new int[nV][nV];
        //AlgFloyd Floyd=new AlgFloyd();
        for(int i=0;i<nV;i++){
            for(int j=0;j<nV;j++){
                DMatrix[i][j]=main.G.getElement(i,j);
            }
        }
        switch(choice1.getSelectedIndex()){
            case 0:
                
            break;
            case 1:
                while(iterator<nV){
                    for(int i=0;i<nV;i++){
                        for(int j=0;j<nV;j++){
                            DMatrix[i][j]=main.G.getElement(i,j);
                        }
                    }
                    Floyd.doFloydWarshall(DMatrix,iterator);
                    for(int i=0;i<nV;i++){
                        for(int j=0;j<nV;j++){
                            int ele=Floyd.getElement(i, j);
                            if(ele==inf){
                               System.out.println("Infinite");
                               MatrixTable.setValueAt("Infinite",i,j);
                            }else{
                               System.out.println(ele);
                               MatrixTable.setValueAt(ele,i,j);
                            }   
                        }   
                    }
                    iterator++;
                }
            break;
            case 2://Ford
                while(iterator<=nV-2){
                    Interface.VConsole.setText(""+(iterator+1));
                    Ford.doFord(DMatrix, iterator);
                    if(Ford.NegativeCycleF){
                        NegativeCycle.setText("Exist");
                    }
                    for(int i=0;i<nV;i++){
                        int ele=Ford.pai[i];
                        if(ele>=inf){
                            System.out.println("P:Inf");
                            MatrixTable.setValueAt("P:Inf",0,i);
                        }else{
                            if(ele==-1){
                                System.out.println("P:---");
                                MatrixTable.setValueAt("P:---",0,i);
                            }else{
                                System.out.println(ele);
                                MatrixTable.setValueAt("P:"+Integer.toString(ele),0,i);
                            }
                        }
                        ele=AlgFord.peso[i];
                        if(ele>=inf){
                            System.out.println("F:Inf");
                            MatrixTable.setValueAt("F:Inf",1,i);
                        }else{
                            System.out.println(ele);
                            MatrixTable.setValueAt("F:"+Integer.toString(ele),1,i);
                        }
                    }
                    iterator++;
                }
                if(iterator<=nV-2){
                }else{
                    iterator++;
                    Ford.doFord(DMatrix, iterator);
                    if(Ford.NegativeCycleF){
                        NegativeCycle.setText("Exist");
                    }
                }
            break;
                
            case 3://Kruskal
                int k=0;
                while(Kruskal.NumberOfEOfS() < nV-1) { //        enquanto (|S| < |V| – 1) faça{ 
                    Kruskal.doKruskal();
                    PartialSolution.setText(Kruskal.S);
                    MSTWeight.setText(Integer.toString(Kruskal.cost));
                    PriorityQueue.setText(Kruskal.Q.QueueString());
                    k++;
                }
            break;    
        }
        
    }//GEN-LAST:event_GoToEndActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        iterator++;
        int nV=main.G.getNumberOfVertex();
        int [][]DMatrix=new int[nV][nV];
        //AlgFloyd Floyd=new AlgFloyd();
        for(int i=0;i<nV;i++){
            for(int j=0;j<nV;j++){
                DMatrix[i][j]=main.G.getElement(i,j);
            }
        }
        switch(choice1.getSelectedIndex()){
            case 0:
                
            break;
            case 1:
                if(iterator<=nV){
                    Floyd.doFloydWarshall(DMatrix,iterator);
                    for(int i=0;i<nV;i++){
                        for(int j=0;j<nV;j++){
                            int ele=Floyd.getElement(i, j);
                            if(ele==inf){
                               System.out.println("Infinite");
                               MatrixTable.setValueAt("Infinite",i,j);
                            }else{
                               System.out.println(ele);
                               MatrixTable.setValueAt(ele,i,j);
                            }   
                        }   
                    }
                }
            break;
                
            case 2://Ford
                if(iterator<=nV-2){
                    Interface.VConsole.setText(""+(iterator+1));
                    Ford.doFord(DMatrix, iterator);
                    if(Ford.NegativeCycleF){
                        NegativeCycle.setText("Exist");
                    }
                    for(int i=0;i<nV;i++){
                        int ele=Ford.pai[i];
                        if(ele>=inf){
                            System.out.println("P:Inf");
                            MatrixTable.setValueAt("P:Inf",0,i);
                        }else{
                            if(ele==-1){
                                System.out.println("P:---");
                                MatrixTable.setValueAt("P:---",0,i);
                            }else{
                                System.out.println(ele);
                                MatrixTable.setValueAt("P:"+Integer.toString(ele),0,i);
                            }
                        }
                        ele=AlgFord.peso[i];
                        if(ele>=inf){
                            System.out.println("F:Inf");
                            MatrixTable.setValueAt("F:Inf",1,i);
                        }else{
                            System.out.println(ele);
                            MatrixTable.setValueAt("F:"+Integer.toString(ele),1,i);
                        }
                    }
                }else{
                    Ford.doFord(DMatrix, iterator);
                    if(Ford.NegativeCycleF){
                        NegativeCycle.setText("Exist");
                    }
                }
                
            break;
                
            case 3://Kruskal
                if(Kruskal.NumberOfEOfS() < nV) { //        enquanto (|S| < |V| – 1) faça{ 
                    Kruskal.doKruskal();
                    PartialSolution.setText(Kruskal.S);
                    MSTWeight.setText(Integer.toString(Kruskal.cost));
                    PriorityQueue.setText(Kruskal.Q.QueueString());
                }
            break;
        }
    }//GEN-LAST:event_NextActionPerformed

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        // TODO add your handling code here:
        int Result=jFileChooser1.showOpenDialog(this);
        if(Result==jFileChooser1.APPROVE_OPTION){ 
            System.out.println(jFileChooser1.getSelectedFile()); //Imprime nome do Arquivo
            try {
                main.G.LoadFile(jFileChooser1.getSelectedFile().getPath());
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_OpenFileActionPerformed

    private void MakeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeGraphActionPerformed
        // TODO add your handling code here:
        jFrame2.dispose(); //Se for o caso de fechar   
        jFrame2.setSize(500,230);   
        // centraliza o formulário  
        jFrame2.setLocationRelativeTo(null);  
        jFrame2.setVisible(true);//Para tornar visivel o novo JFrame 
    }//GEN-LAST:event_MakeGraphActionPerformed
    
    private void Saver(String g){
        try {
            main.G.SaveFile(g);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    private void SaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileActionPerformed
        // TODO add your handling code here:
        int Result=jFileChooser2.showSaveDialog(this);
        if(Result==jFileChooser2.APPROVE_OPTION){ 
            System.out.println(jFileChooser2.getSelectedFile()); //Imprime nome do Arquivo
            Saver(jFileChooser2.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_SaveFileActionPerformed

    private void OKMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKMatrixActionPerformed
        // TODO add your handling code here:
        int nV=Integer.parseInt(numVertex.getText());
        for(int i=0;i<nV;i++){
                System.out.println();
                for(int j=0;j<nV;j++){
                    int m=Integer.parseInt(String.valueOf(Matrix.getValueAt(i,j)));
                    if(m>=inf){
                        m=inf;
                    }
                    System.out.print(","+m);//teste
                    main.G.setElement(i,j,m);
                }
        }
    }//GEN-LAST:event_OKMatrixActionPerformed

    private void jFileChooser2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");//deixar com aparencia do Windows
                if (UIManager.getSystemLookAndFeelClassName().equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                iterator=-1;
                new Interface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GoToEnd;
    public static javax.swing.JTextPane MSTWeight;
    private javax.swing.JButton MakeGraph;
    private javax.swing.JTable Matrix;
    public static javax.swing.JTable MatrixTable;
    public static javax.swing.JTextPane NegativeCycle;
    private javax.swing.JButton Next;
    private javax.swing.JButton OKMatrix;
    private javax.swing.JButton OpenFile;
    public static javax.swing.JTextPane PartialSolution;
    public static javax.swing.JTextPane PriorityQueue;
    private javax.swing.JButton SaveFile;
    public static javax.swing.JTextArea VConsole;
    private java.awt.Choice choice1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.TextField numVertex;
    // End of variables declaration//GEN-END:variables
}
